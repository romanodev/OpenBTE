Material
===================================

OpenBTE features several material models. A material model takes bulk data in input. Bulk-related files can either be generated by the users or retrieved by the database. For the latter case, you can use the following command 

.. code-block:: python

   Material(source='database',filename='Si',temperature=300,model='rta2DSym')

In this case the file ``rta.npz`` will be copy into your current directory and the material model ``rta2DSym`` will be created and saved in file ``material.npz``.   


Fourier model
-----------------------------------

OpenBTE features a 3D solver of diffusive heat conduction solved on unstructured grids. This model is used as a first-guess to OpenBTE and can be used as a stand-alone model. To create the relative material model, simply use

.. code-block:: python

   Material(model='fourier',kappa=130)

where ``kappa`` is the bulk thermal conductivity.

It is also possible to define an anisotropic thermal conductivity 

.. code-block:: python

   Material(model='fourier',kappa_xx=100,kappa_yy=150)

Gray model approximation
-----------------------------------

The simplest BTE model assumes gray medium, i.e. phonons have the same MFP. To create ``material.npz`` the mean-free-path (in m) and the bulk thermal conductivity must be specified. Here is an example:

.. code-block:: python

   Material(model='gray',mfp=1e-8,kappa=130)

Note that the gray model assumes 2D material, i.e. no integration over the azimuthal angle is performed.


Mean-free-path approximation
-----------------------------------

This method estimates kappa given only the cumulative thermal conductivity. It assumes isotropic distribution, therefore use it cautiously. The BTE to solve is

* ``model='mfp3D'``: three-dimensional domain

* ``model='mfp2DSym'``: three-dimensional domain with infinite thickness

* ``model='mfp2D'``: two-dimensional domain


The material file can be created by running

.. code-block:: python

   Material(model=<('mfp3D'),'mfp2DSym','mfp2D'>)

provided the file ``mfp.npz`` is in your current directory. This file must contain the following information

.. table:: 
   :widths: auto
   :align: center

   +--------------------------+-------------+--------------------------------------------------------------------------+-------------------------------------------+
   | **Item**                 | **Shape**   |       **Symbol [Units]**                                                 |    **Name**                               |
   +--------------------------+-------------+--------------------------------------------------------------------------+-------------------------------------------+
   | ``mfp``                  |  N          |   :math:`\Lambda` [:math:`m`]                                            | Mean Free Path                            |
   +--------------------------+-------------+--------------------------------------------------------------------------+-------------------------------------------+
   | ``Kacc``                 |  N          |   :math:`\alpha` [:math:`\mathrm{W}\mathrm{m}^{-1}\textrm{K}^{-1}`]      | Cumulative thermal conductivity           |
   +--------------------------+-------------+--------------------------------------------------------------------------+-------------------------------------------+
   
Once you have your dictionary with proper information, you can simplt save the ``mfp.npz`` file by typing

.. code-block:: python

   from openbte.utils import *

   save_data('mfp',{'mfp':mfp,'Kacc':Kacc})



Relaxation time approximation
-----------------------------------

RTA models implement the anisotropic-mean-free-path-BTE (aMFP-BTE_) flavor.


Creating ``rta.npz``
###############################################

The first step for solving the RTA-BTE is to create the file ``rta.npz``. This file has ``npz`` format and must have the following items:

.. table:: 
   :widths: auto
   :align: center

   +----------------+-------------+--------------------------------------------------------------------------+--------------------------+
   | **Item**       | **Shape**   |       **Symbol [Units]**                                                 |    **Name**              |
   +----------------+-------------+--------------------------------------------------------------------------+--------------------------+
   | ``tau``        |  N          |   :math:`\tau` [:math:`s`]                                               | Scattering time          |
   +----------------+-------------+--------------------------------------------------------------------------+--------------------------+
   | ``C``          |  N          |   :math:`C` [:math:`\mathrm{W}\mathrm{s}\textrm{K}^{-1}\textrm{m}^{-3}`] | Specific Heat capacity   |
   +----------------+-------------+--------------------------------------------------------------------------+--------------------------+
   | ``v``          |  N x 3      |   :math:`\mathbf{v}` [:math:`\mathrm{m}\textrm{s}^{-1}`]                 | Group velocity           |
   +----------------+-------------+--------------------------------------------------------------------------+--------------------------+
   | ``kappa``      |  3 x 3      |   :math:`\kappa` [:math:`\mathrm{W}\textrm{K}^{-1}\textrm{m}^{-1}`]      | Thermal conductivity     |
   +----------------+-------------+--------------------------------------------------------------------------+--------------------------+


Each item must be a ``numpy`` array with the prescribed ``shape``. The thermal conductivity tensor is given by :math:`\kappa^{\alpha\beta} = \sum_{\mu} C_\mu  v_\mu^{\alpha} v_\mu^{\beta} \tau_\mu`. 

With ``rta.npz`` in your current directory, ``material.npz`` can be generated simply with

.. code-block:: python

   Material(model=<('rta3D'),'rta2DSym','rta2D'>)


The RTA-BTE has three material models:

* ``model='rta3D'``: three-dimensional domain

* ``model='rta2DSym'``: three-dimensional domain with infinite thickness

* ``model='rta2D'``: two-dimensional domain


Interface with AlmaBTE
###############################################

AlmaBTE_ is a popular package that compute the thermal conductivity of bulk materials, thin films and superlattices. OpenBTE is interfaced with AlmaBTE for RTA calculations via the script ``almabte2openbte.py``. 

Assuming you have ``AlmaBTE`` in your current ``PATH``, this an example for ``Si``.

- Download Silicon force constants from AlmaBTE's database_.

  .. code-block:: bash

   wget https://almabte.bitbucket.io/database/Si.tar.xz   
   tar -xf Si.tar.xz && rm -rf Si.tar.xz  

- Compute bulk scattering time with AlmaBTE.

  .. code-block:: bash

   echo "<singlecrystal> 
   <compound name='Si'/>
   <gridDensity A='8' B='8' C='8'/>
   </singlecrystal>" > inputfile.xml
   
   VCAbuilder inputfile.xml
   phononinfo Si/Si_8_8_8.h5 300.0
    
- A file named ``Si_8_8_8_300K.phononinfo`` is in your current directory. Note that you can specify the temperature. Here we choose 300 K. `The file ``rta.npz`` can then be created with 

  .. code-block:: bash

     AlmaBTE2OpenBTE Si_8_8_8_300K.phononinfo

- Using OpenBTE command line interface, the ``material`` may be created with

  .. code-block:: bash

     OpenBTE $'Material:\n model: rta2DSym'

Interface with Phono3Py
###############################################

Phono3py_ calculates the bulk thermal conductivity using both the RTA and full scattering operator. Currently, only the former is supported. Once Phono3py is solved, the ``rta.npz`` is created by


.. code-block:: bash

   phono3pytoOpenBTE unitcell_name nx ny nz 

where ``unitcell_name`` is the file of your unit cell and ``nx ny nz`` is the reciprical space discretization.

Here is an example assuming you have a working installation of Phono3py:

.. code-block:: bash

   git clone https://github.com/phonopy/phono3py.git

   cd phono3py/examples/Si-PBEsol

   phono3py --dim="2 2 2" --sym-fc -c POSCAR-unitcell

   phono3py --dim="2 2 2" --pa="0 1/2 1/2 1/2 0 1/2 1/2 1/2 0" -c POSCAR-unitcell --mesh="8 8 8"  --fc3 --fc2 --ts=100

   Phono3py2OpenBTE POSCAR-unitcell 8 8 8 

Note that ``rta.npz`` is also created in the case you want to use a RTA model.   



.. _Deepdish: https://deepdish.readthedocs.io/
.. _Phono3py: https://phonopy.github.io/phono3py/
.. _AlmaBTE: https://almabte.bitbucket.io/
.. _database: https://almabte.bitbucket.io/database/
.. _aMFP-BTE: https://arxiv.org/abs/2105.08181
.. _Deepdish: https://deepdish.readthedocs.io/
.. _`Wu et al.`: https://www.sciencedirect.com/science/article/pii/S0009261416310193?via%3Dihub
.. _Phono3py: https://phonopy.github.io/phono3py/





